## You can generate a custom docker compose file automatically on http://reportportal.io/download (Step 2)

## This is example of Docker Compose for ReportPortal
## Do not forget to configure data volumes for production usage

## Execute 'docker-compose -f docker-compose.yml -p reportportal up -d --force-recreate' --build
## to start all containers in daemon mode
## Where:
##      '-f docker-compose.yml' -- specifies this compose file
##      '-p reportportal' -- specifies container's prefix (project name)
##      '-d' -- enables daemon mode
##      '--force-recreate' -- forces re-recreating of all containers

version: '2.4'
services:

  gateway:
    image: traefik:v2.0.7
    ports:
      - "8080:8080" # HTTP exposed
      - "8081:8081" # HTTP Administration exposed
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - --providers.docker=true
      - --providers.docker.constraints=Label(`traefik.expose`, `true`)
      - --entrypoints.web.address=:8080
      - --entrypoints.traefik.address=:8081
      - --api.dashboard=true
      - --api.insecure=true
    restart: always

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    volumes:
      - /var/data/elasticsearch:/usr/share/elasticsearch/data
    environment:
      - "ES_JAVA_OPTS=-Dlog4j2.formatMsgNoLookups=true"
      - "bootstrap.memory_lock=true"
      - "discovery.type=single-node"
      - "logger.level=INFO"
      - "xpack.security.enabled=true"
      - "ELASTIC_PASSWORD=elastic1q2w3e"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
      # ports:
      # - "9200:9200"
    healthcheck:
      test: ["CMD", "curl","-s" ,"-f", "http://elastic:elastic1q2w3e@localhost:9200/_cat/health"]
    restart: always

  analyzer:
    image: reportportal/service-auto-analyzer:5.6.0
    environment:
      LOGGING_LEVEL: info
      AMQP_URL: amqp://rabbitmq:rabbitmq@rabbitmq:5672
      ES_HOSTS: http://elastic:elastic1q2w3e@elasticsearch:9200
      MINIO_SHORT_HOST: ${SHORT_BUCKET_HOST}
      ANALYZER_BINARYSTORE_MINIO_REGION: ${AWS_REGION} 
      MINIO_ACCESS_KEY: ${BUCKET_ACCESS_KEY}
      MINIO_SECRET_KEY: ${BUCKET_SECRET_KEY}
    depends_on:
      - elasticsearch
    restart: always

  analyzer_train: #an analyzer instance for training, don't forget to setup the same storage(either minio, or filesystem) as for main analyzer
    image: reportportal/service-auto-analyzer:5.6.0
    environment:
      LOGGING_LEVEL: info
      AMQP_URL: amqp://rabbitmq:rabbitmq@rabbitmq:5672
      ES_HOSTS: http://elastic:elastic1q2w3e@elasticsearch:9200
      MINIO_SHORT_HOST: ${SHORT_BUCKET_HOST}
      MINIO_ACCESS_KEY: ${BUCKET_ACCESS_KEY}
      MINIO_SECRET_KEY: ${BUCKET_ACCESS_KEY}
      INSTANCE_TASK_TYPE: train
      UWSGI_WORKERS: 1
    depends_on:
      - elasticsearch
    restart: always 

  metrics-gatherer: # metrics service for analyzing how analyzer is working and manage retrained models
    image: reportportal/service-metrics-gatherer:1.1.17
    environment:
      LOGGING_LEVEL: info
      ES_HOST: http://elasticsearch:9200
      ES_USER: elastic
      ES_PASSWORD: elastic1q2w3e
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_PORT: 5432
      ALLOWED_START_TIME: "22:00"
      ALLOWED_END_TIME: "08:00"
      #TZ: Europe/Minsk you can change a timezone like this to specify when metrics are gathered
      AMQP_URL: amqp://rabbitmq:rabbitmq@rabbitmq:5672
    depends_on:
      - elasticsearch
    restart: always       

  ### Initial reportportal db schema. Run once.
  db-scripts:
    image: reportportal/migrations:5.6.0
    environment:
      POSTGRES_SERVER: ${DB_HOST}
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    restart: on-failure

  rabbitmq:
    image: rabbitmq:3.7.16-management
    environment:
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      retries: 5
    restart: always

  uat:
    image: reportportal/service-authorization:5.6.3
    environment:
      - RP_DB_HOST=${DB_HOST}
      - RP_DB_USER=${DATABASE_USER}
      - RP_DB_PASS=${DATABASE_PASSWORD}
      - RP_DB_NAME=${DATABASE_NAME}
      - RP_BINARYSTORE_TYPE=minio
      - RP_BINARYSTORE_MINIO_ENDPOINT=${BUCKET_URL}
      - RP_BINARYSTORE_MINIO_REGION=${AWS_REGION}
      - RP_BINARYSTORE_MINIO_ACCESSKEY=${BUCKET_ACCESS_KEY}
      - RP_BINARYSTORE_MINIO_SECRETKEY=${BUCKET_SECRET_KEY}
      - RP_SESSION_LIVE=86400 #in seconds
    labels:
      - "traefik.http.middlewares.uat-strip-prefix.stripprefix.prefixes=/uat"
      - "traefik.http.routers.uat.middlewares=uat-strip-prefix@docker"
      - "traefik.http.routers.uat.rule=PathPrefix(`/uat`)"
      - "traefik.http.routers.uat.service=uat"
      - "traefik.http.services.uat.loadbalancer.server.port=9999"
      - "traefik.http.services.uat.loadbalancer.server.scheme=http"
      - "traefik.expose=true"
    restart: always

  index:
    image: reportportal/service-index:5.0.11
    depends_on:
      gateway:
        condition: service_started
    environment:
      - LB_URL=http://gateway:8081
      - TRAEFIK_V2_MODE=true
    labels:
        - "traefik.http.routers.index.rule=PathPrefix(`/`)"
        - "traefik.http.routers.index.service=index"
        - "traefik.http.services.index.loadbalancer.server.port=8080"
        - "traefik.http.services.index.loadbalancer.server.scheme=http"
        - "traefik.expose=true"
    restart: always

  api:
    image: reportportal/service-api:5.6.3
    depends_on:
      rabbitmq:
        condition: service_healthy
      gateway:
        condition: service_started
    environment:
      - RP_DB_HOST=${DB_HOST}
      - RP_DB_USER=${DATABASE_USER}
      - RP_DB_PASS=${DATABASE_PASSWORD}
      - RP_DB_NAME=${DATABASE_NAME}
      - RP_AMQP_USER=rabbitmq
      - RP_AMQP_PASS=rabbitmq
      - RP_AMQP_APIUSER=rabbitmq
      - RP_AMQP_APIPASS=rabbitmq
      - RP_BINARYSTORE_TYPE=minio
      - RP_BINARYSTORE_MINIO_ENDPOINT=${BUCKET_URL}
      - RP_BINARYSTORE_MINIO_REGION=${AWS_REGION}
      - RP_BINARYSTORE_MINIO_ACCESSKEY=${BUCKET_ACCESS_KEY}
      - RP_BINARYSTORE_MINIO_SECRETKEY=${BUCKET_SECRET_KEY}
      - LOGGING_LEVEL_ORG_HIBERNATE_SQL=info
      - JAVA_OPTS=-Xmx1g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp  -Dcom.sun.management.jmxremote.rmi.port=12349 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only=false  -Dcom.sun.management.jmxremote.port=9010 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=0.0.0.0
    labels:
      - "traefik.http.middlewares.api-strip-prefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.api.middlewares=api-strip-prefix@docker"
      - "traefik.http.routers.api.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.api.service=api"
      - "traefik.http.services.api.loadbalancer.server.port=8585"
      - "traefik.http.services.api.loadbalancer.server.scheme=http"
      - "traefik.expose=true"
    restart: always

  jobs:
    image: reportportal/service-jobs:5.6.3
    depends_on:
      rabbitmq:
        condition: service_healthy
      gateway:
        condition: service_started
    environment:
      RP_DB_HOST: ${DB_HOST}
      RP_DB_USER: ${DATABASE_USER}
      RP_DB_PASS: ${DATABASE_PASSWORD}
      RP_DB_NAME: ${DATABASE_NAME}
      RP_AMQP_USER: rabbitmq
      RP_AMQP_PASS: rabbitmq
      RP_AMQP_APIUSER: rabbitmq
      RP_AMQP_APIPASS: rabbitmq
      RP_BINARYSTORE_TYPE: minio
      RP_BINARYSTORE_MINIO_ENDPOINT: ${BUCKET_URL}
      RP_BINARYSTORE_MINIO_REGION: ${AWS_REGION}
      RP_BINARYSTORE_MINIO_ACCESSKEY: ${BUCKET_ACCESS_KEY}
      RP_BINARYSTORE_MINIO_SECRETKEY: ${BUCKET_SECRET_KEY}
      RP_ENVIRONMENT_VARIABLE_CLEAN_ATTACHMENT_CRON: 0 0 */24 * * *
      RP_ENVIRONMENT_VARIABLE_CLEAN_LOG_CRON: 0 0 */24 * * *
      RP_ENVIRONMENT_VARIABLE_CLEAN_LAUNCH_CRON: 0 0 */24 * * *
      RP_ENVIRONMENT_VARIABLE_CLEAN_STORAGE_CRON: 0 0 */24 * * *
      RP_ENVIRONMENT_VARIABLE_STORAGE_PROJECT_CRON: 0 */5 * * * *
    labels:
    - traefik.http.middlewares.jobs-strip-prefix.stripprefix.prefixes=/jobs
    - traefik.http.routers.jobs.middlewares=jobs-strip-prefix@docker
    - traefik.http.routers.jobs.rule=PathPrefix(`/jobs`)
    - traefik.http.routers.jobs.service=jobs
    - traefik.http.services.jobs.loadbalancer.server.port=8686
    - traefik.http.services.jobs.loadbalancer.server.scheme=http
    - traefik.expose=true
  ui:
    image: reportportal/service-ui:5.6.0
    environment:
      - RP_SERVER_PORT=8080
    labels:
      - "traefik.http.middlewares.ui-strip-prefix.stripprefix.prefixes=/ui"
      - "traefik.http.routers.ui.middlewares=ui-strip-prefix@docker"
      - "traefik.http.routers.ui.rule=PathPrefix(`/ui`)"
      - "traefik.http.routers.ui.service=ui"
      - "traefik.http.services.ui.loadbalancer.server.port=8080"
      - "traefik.http.services.ui.loadbalancer.server.scheme=http"
      - "traefik.expose=true"
    restart: always